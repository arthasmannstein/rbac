import sys
from pathlib import Path

ROLES_ATOMIC_DIR = Path("roles/atomic")
PERMISSIONS_DIR = Path("permissions")
AGGREGATED_DIR = Path("roles/aggregated")
REPORT_PATH = Path("validation_report.md")

def extract_permission_from_role(md_path):
    with open(md_path, "r", encoding="utf-8") as f:
        lines = f.readlines()

    for line in lines:
        if line.strip().startswith("- `") and ":" in line:
            return line.strip().strip("- `").strip()
    return None

def extract_used_permissions_from_aggregated():
    used_roles = set()
    for file in AGGREGATED_DIR.glob("*.md"):
        with open(file, "r", encoding="utf-8") as f:
            lines = f.readlines()
        in_block = False
        for line in lines:
            if line.strip().startswith("## –°–æ—Å—Ç–∞–≤ –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö —Ä–æ–ª–µ–π"):
                in_block = True
                continue
            if in_block:
                if line.strip().startswith("- "):
                    role = line.strip().lstrip("- ").strip("`")
                    used_roles.add(role)
                elif line.strip() == "":
                    continue
                else:
                    break
    return used_roles

def extract_permission_reference(md_path):
    for line in md_path.read_text(encoding="utf-8").splitlines():
        if line.strip().startswith("- `") and ":" in line:
            return line.strip().strip("- `").strip()
    return None

def validate_all():
    errors = []
    warnings = []
    report_lines = ["# üßæ –û—Ç—á—ë—Ç –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–æ–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏\n"]

    defined_permissions = set(p.stem for p in PERMISSIONS_DIR.glob("*.md"))
    used_permissions = set()
    used_atomic_roles = extract_used_permissions_from_aggregated()

    atomic_roles_defined = set()
    permission_refs_from_roles = set()

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö —Ä–æ–ª–µ–π
    for role_file in ROLES_ATOMIC_DIR.glob("*.md"):
        role_name = role_file.stem
        atomic_roles_defined.add(role_name)

        content = role_file.read_text(encoding="utf-8")
        if "## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ" not in content and "## –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ" not in content:
            errors.append(f"‚ùå –§–∞–π–ª `{role_name}.md` –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ–∫—Ü–∏–π `## –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ` –∏–ª–∏ `## –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ`.")

        permission = extract_permission_reference(role_file)
        if not permission:
            errors.append(f"‚ùå –í –∞—Ç–æ–º–∞—Ä–Ω–æ–π —Ä–æ–ª–∏ `{role_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ.")
            continue

        permission_refs_from_roles.add(permission)
        perm_file_name = permission.replace(":", "-")
        used_permissions.add(perm_file_name)
        if perm_file_name not in defined_permissions:
            errors.append(f"‚ùå –í –∞—Ç–æ–º–∞—Ä–Ω–æ–π —Ä–æ–ª–∏ `{role_name}` —É–∫–∞–∑–∞–Ω–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ `{permission}`.")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    for perm_file in PERMISSIONS_DIR.glob("*.md"):
        perm_name = perm_file.stem
        if perm_name not in used_permissions:
            warnings.append(f"‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ `{perm_name.replace('-', ':')}` –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∏ –≤ –æ–¥–Ω–æ–π —Ä–æ–ª–∏.")
        content = perm_file.read_text(encoding="utf-8")
        if "## –û–ø–∏—Å–∞–Ω–∏–µ" not in content:
            warnings.append(f"‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ `{perm_name}` –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ü–∏–∏ `## –û–ø–∏—Å–∞–Ω–∏–µ`.")

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤
    for role in sorted(used_atomic_roles):
        if role not in atomic_roles_defined:
            errors.append(f"‚ùå –í –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–æ–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∞—Ç–æ–º–∞—Ä–Ω–∞—è —Ä–æ–ª—å `{role}`.")

    # 4. –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞—Ç–æ–º–∞—Ä–Ω—ã–µ —Ä–æ–ª–∏
    unused_atomic_roles = atomic_roles_defined - used_atomic_roles
    for r in sorted(unused_atomic_roles):
        warnings.append(f"‚ö†Ô∏è –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ä–æ–ª—å `{r}` –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∏ –≤ –æ–¥–Ω–æ–π –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–æ–ª–∏.")

    # Markdown report
    report_lines.append("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    report_lines += [
        "",
        "| –ö–∞—Ç–µ–≥–æ—Ä–∏—è         | –ö–æ–ª-–≤–æ |",
        "|-------------------|--------|",
        f"| –ê—Ç–æ–º–∞—Ä–Ω—ã–µ —Ä–æ–ª–∏    | {len(atomic_roles_defined)} |",
        f"| –ê–≥—Ä–µ–≥–∞—Ç—ã          | {len(list(AGGREGATED_DIR.glob('*.md')))} |",
        f"| –†–∞–∑—Ä–µ—à–µ–Ω–∏—è        | {len(defined_permissions)} |",
        f"| –ù–µ–∏—Å–ø. —Ä–æ–ª–∏       | {len(unused_atomic_roles)} |",
        f"| –ù–µ–∏—Å–ø. —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è | {len(defined_permissions - used_permissions)} |",
        ""
    ]

    if errors:
        report_lines.append("## ‚ùå –û—à–∏–±–∫–∏")
        report_lines += [f"- {e}" for e in errors]
    else:
        report_lines.append("‚úÖ –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")

    if warnings:
        report_lines.append("\n## ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
        report_lines += [f"- {w}" for w in warnings]
    else:
        report_lines.append("\n‚úÖ –ù–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

    REPORT_PATH.write_text("\n".join(report_lines), encoding="utf-8")
    print("üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –æ—Ç—á—ë—Ç:", REPORT_PATH)

    if errors:
        sys.exit(1)

if __name__ == "__main__":
    validate_all()
